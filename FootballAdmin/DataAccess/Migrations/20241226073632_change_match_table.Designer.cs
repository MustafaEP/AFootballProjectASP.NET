// <auto-generated />
using System;
using Access.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Access.Migrations
{
    [DbContext(typeof(Conn))]
    [Migration("20241226073632_change_match_table")]
    partial class change_match_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.AddedFootballersExplorer.AddedFootballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("FootballerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("FootballerId");

                    b.ToTable("AddedFootballer");
                });

            modelBuilder.Entity("Entities.Concrete.AddedFootballersExplorer.AddedFootballerUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedFootballerId")
                        .HasColumnType("int");

                    b.Property<int>("Confidence")
                        .HasColumnType("int");

                    b.Property<int>("DefendingChange")
                        .HasColumnType("int");

                    b.Property<int>("DribblingChange")
                        .HasColumnType("int");

                    b.Property<int>("PaceChange")
                        .HasColumnType("int");

                    b.Property<int>("PassingChange")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalityChange")
                        .HasColumnType("int");

                    b.Property<int>("ShootingChange")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedFootballerId")
                        .IsUnique();

                    b.ToTable("AddedFootballerUpgrade");
                });

            modelBuilder.Entity("Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Entities.Concrete.AdminNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("Entities.Concrete.ClubFormation.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FotmationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerClubId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerClubId")
                        .IsUnique();

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("Entities.Concrete.ClubFormation.XIPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedFootballerId")
                        .HasColumnType("int");

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedFootballerId");

                    b.HasIndex("FormationId");

                    b.ToTable("XIPlayers");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerExplorer.FootballerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Foot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<string>("Weght")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerDatas");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FootballerStatisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FootballerStatisticId");

                    b.ToTable("FootballerAbilities");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FootballerId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FootballerId");

                    b.ToTable("FootballerPositions");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FootballerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FootballerId")
                        .IsUnique();

                    b.ToTable("FootballerStatistics");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerDefending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefAwareness")
                        .HasColumnType("int");

                    b.Property<int>("HeadingAccuracy")
                        .HasColumnType("int");

                    b.Property<int>("Interceptions")
                        .HasColumnType("int");

                    b.Property<int>("SlidingTackle")
                        .HasColumnType("int");

                    b.Property<int>("StandingTackle")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerDefendings");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerDribbling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("BallControl")
                        .HasColumnType("int");

                    b.Property<int>("Composure")
                        .HasColumnType("int");

                    b.Property<int>("DribblingP")
                        .HasColumnType("int");

                    b.Property<int>("Reactions")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerDribblings");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Acceleration")
                        .HasColumnType("int");

                    b.Property<int>("SprintSpeed")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerPaces");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPassing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Crossing")
                        .HasColumnType("int");

                    b.Property<int>("Curve")
                        .HasColumnType("int");

                    b.Property<int>("FreeKickAccuracy")
                        .HasColumnType("int");

                    b.Property<int>("LongPassing")
                        .HasColumnType("int");

                    b.Property<int>("ShortPassing")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerPassings");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPhysicality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aggression")
                        .HasColumnType("int");

                    b.Property<int>("Jumping")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("footballerPhysicalities");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerShooting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Finishing")
                        .HasColumnType("int");

                    b.Property<int>("LongShots")
                        .HasColumnType("int");

                    b.Property<int>("Penalties")
                        .HasColumnType("int");

                    b.Property<int>("Positioning")
                        .HasColumnType("int");

                    b.Property<int>("ShotPower")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Volleys")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("FootballerShootings");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerClubId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLineUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerClubId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Entities.Concrete.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Entities.Concrete.Matches.FootballMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Asists")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayBallPlaying")
                        .HasColumnType("int");

                    b.Property<int>("AwayClubId")
                        .HasColumnType("int");

                    b.Property<int>("AwayCorners")
                        .HasColumnType("int");

                    b.Property<string>("AwayRedCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwaySetPlay")
                        .HasColumnType("int");

                    b.Property<string>("AwayYellowCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeBallPlaying")
                        .HasColumnType("int");

                    b.Property<int>("HomeClubId")
                        .HasColumnType("int");

                    b.Property<int>("HomeCorners")
                        .HasColumnType("int");

                    b.Property<string>("HomeRedCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeSetPlay")
                        .HasColumnType("int");

                    b.Property<string>("HomeYellowCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposeLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("isRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AwayClubId");

                    b.HasIndex("HomeClubId");

                    b.ToTable("FootballMatches");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ClubsFootballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AltPositions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Confidence")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Defending")
                        .HasColumnType("int");

                    b.Property<int>("DefendingUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("Dribbling")
                        .HasColumnType("int");

                    b.Property<int>("DribblingUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("ManagerClubId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pace")
                        .HasColumnType("int");

                    b.Property<int>("PaceUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("Passing")
                        .HasColumnType("int");

                    b.Property<int>("PassingUpgrade")
                        .HasColumnType("int");

                    b.Property<int>("Physicality")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalityUpgrade")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredFoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shooting")
                        .HasColumnType("int");

                    b.Property<int>("ShootingUpgrade")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerClubId");

                    b.ToTable("ClubsFootballers");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.Footballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AltPositions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Defending")
                        .HasColumnType("int");

                    b.Property<int?>("Dribbling")
                        .HasColumnType("int");

                    b.Property<int>("MarketPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pace")
                        .HasColumnType("int");

                    b.Property<int?>("Passing")
                        .HasColumnType("int");

                    b.Property<int?>("Physicality")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredFoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Shooting")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footballers");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ManagerClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ManagerClubs");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ScoreofFootballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Asist")
                        .HasColumnType("int");

                    b.Property<int>("ClubsFootballerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<float>("GoalExpectetion")
                        .HasColumnType("real");

                    b.Property<int>("RedCard")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("YellowCard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubsFootballerId")
                        .IsUnique();

                    b.ToTable("ScoreofFootballers");
                });

            modelBuilder.Entity("Entities.Concrete.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerSecondPositions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrongFoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Entities.Concrete.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Entities.Concrete.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Players")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("Entities.Concrete.AddedFootballersExplorer.AddedFootballer", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", "Club")
                        .WithMany("AddedFootballers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.NewVersion.Footballer", "Footballer")
                        .WithMany("AddedFootballers")
                        .HasForeignKey("FootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Footballer");
                });

            modelBuilder.Entity("Entities.Concrete.AddedFootballersExplorer.AddedFootballerUpgrade", b =>
                {
                    b.HasOne("Entities.Concrete.AddedFootballersExplorer.AddedFootballer", "AddedFootballer")
                        .WithOne("Upgrade")
                        .HasForeignKey("Entities.Concrete.AddedFootballersExplorer.AddedFootballerUpgrade", "AddedFootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedFootballer");
                });

            modelBuilder.Entity("Entities.Concrete.ClubFormation.Formation", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", "ManagerClub")
                        .WithOne("Formation")
                        .HasForeignKey("Entities.Concrete.ClubFormation.Formation", "ManagerClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagerClub");
                });

            modelBuilder.Entity("Entities.Concrete.ClubFormation.XIPlayer", b =>
                {
                    b.HasOne("Entities.Concrete.AddedFootballersExplorer.AddedFootballer", "AddedFootballer")
                        .WithMany()
                        .HasForeignKey("AddedFootballerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Concrete.ClubFormation.Formation", "Formation")
                        .WithMany("XIPlayers")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedFootballer");

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerExplorer.FootballerData", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("FootballerDatas")
                        .HasForeignKey("Entities.Concrete.FootballerExplorer.FootballerData", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerAbility", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithMany("footballerAbilities")
                        .HasForeignKey("FootballerStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerPosition", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.Footballer", "Footballer")
                        .WithMany("FootballerPositions")
                        .HasForeignKey("FootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footballer");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerStatistic", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.Footballer", "Footballer")
                        .WithOne("Statistic")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footballer");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerDefending", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("DefendingDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerDefending", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerDribbling", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("DribblingDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerDribbling", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPace", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("PaceDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerPace", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPassing", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("PassingDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerPassing", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerPhysicality", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("PhysicalityDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerPhysicality", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.Statistics.FootballerShooting", b =>
                {
                    b.HasOne("Entities.Concrete.FootballerStatistics.FootballerStatistic", "FootballerStatistic")
                        .WithOne("ShootingDetails")
                        .HasForeignKey("Entities.Concrete.FootballerStatistics.Statistics.FootballerShooting", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballerStatistic");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", "ManagerClub")
                        .WithMany()
                        .HasForeignKey("ManagerClubId");

                    b.Navigation("ManagerClub");
                });

            modelBuilder.Entity("Entities.Concrete.Match", b =>
                {
                    b.HasOne("Entities.Concrete.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("Entities.Concrete.Matches.FootballMatch", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", "AwayClub")
                        .WithMany()
                        .HasForeignKey("AwayClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", "HomeClub")
                        .WithMany()
                        .HasForeignKey("HomeClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayClub");

                    b.Navigation("HomeClub");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ClubsFootballer", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ManagerClub", null)
                        .WithMany("Footballers")
                        .HasForeignKey("ManagerClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ScoreofFootballer", b =>
                {
                    b.HasOne("Entities.Concrete.NewVersion.ClubsFootballer", "ClubsFootballer")
                        .WithOne("ScoreofFootballer")
                        .HasForeignKey("Entities.Concrete.NewVersion.ScoreofFootballer", "ClubsFootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubsFootballer");
                });

            modelBuilder.Entity("Entities.Concrete.Player", b =>
                {
                    b.HasOne("Entities.Concrete.Team", "Team")
                        .WithMany("ListPlayer")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.Concrete.Team", b =>
                {
                    b.HasOne("Entities.Concrete.Manager", "Manager")
                        .WithOne("Team")
                        .HasForeignKey("Entities.Concrete.Team", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Entities.Concrete.TrainingSession", b =>
                {
                    b.HasOne("Entities.Concrete.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.Concrete.AddedFootballersExplorer.AddedFootballer", b =>
                {
                    b.Navigation("Upgrade")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.ClubFormation.Formation", b =>
                {
                    b.Navigation("XIPlayers");
                });

            modelBuilder.Entity("Entities.Concrete.FootballerStatistics.FootballerStatistic", b =>
                {
                    b.Navigation("DefendingDetails")
                        .IsRequired();

                    b.Navigation("DribblingDetails")
                        .IsRequired();

                    b.Navigation("FootballerDatas")
                        .IsRequired();

                    b.Navigation("PaceDetails")
                        .IsRequired();

                    b.Navigation("PassingDetails")
                        .IsRequired();

                    b.Navigation("PhysicalityDetails")
                        .IsRequired();

                    b.Navigation("ShootingDetails")
                        .IsRequired();

                    b.Navigation("footballerAbilities");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ClubsFootballer", b =>
                {
                    b.Navigation("ScoreofFootballer");
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.Footballer", b =>
                {
                    b.Navigation("AddedFootballers");

                    b.Navigation("FootballerPositions");

                    b.Navigation("Statistic")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.NewVersion.ManagerClub", b =>
                {
                    b.Navigation("AddedFootballers");

                    b.Navigation("Footballers");

                    b.Navigation("Formation")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("ListPlayer");
                });
#pragma warning restore 612, 618
        }
    }
}
